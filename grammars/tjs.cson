'scopeName': 'source.tjs'
'name': 'TJS'
'fileTypes': [
    "tjs"
]
'patterns': [
    # Comments
    {
        'begin': '/\\*'
        'end': '\\*/\\n?'
        'name': 'comment.block.tjs'
    }
    {
        'begin': '//'
        'end': '$\\n?'
        'name': 'comment.line.double-slash.tjs'
    }

    # Preprocessors
    {
        'match': '@set'
        'name': 'invalid.deprecated.preprocessor.tjs'
    }
    {
        'match': '@if'
        'name': 'invalid.deprecated.preprocessor.tjs'
    }
    {
        'match': '@endif'
        'name': 'invalid.deprecated.preprocessor.tjs'
    }

    # Strings
    {
        'match': '@".*?"'
        'name': 'string.quoted.other.literal.tjs'
    }
    {
        'match': '@\'.*?\''
        'name': 'string.quoted.other.literal.tjs'
    }
    {
        'match': '".*?"'
        'name': 'string.quoted.double.literal.tjs'
    }
    {
        'match': '\'.*?\''
        'name': 'string.quoted.single.literal.tjs'
    }

    # RegExp
    {
        'match': '/.+?/[gil]*'
        'name': 'string.regexp.literal.tjs'
    }

    # Octet
    {
        'begin': '<%'
        'end': '%>'
        'name': 'constant.octet.literal.tjs'
    }

    # Numbers
    {
        'match': '\\b(0[xX][0-9a-fA-F\.]+(p[0-9]*)?)\\b'
        'name': 'constant.numeric.hexadecimal.literal.tjs'
    }
    {
        'match': '\\b(0[0-7\.]+)\\b'
        'name': 'constant.numeric.octal.literal.tjs'
    }
    {
        'match': '\\b(0[bB][0-1\.]+)\\b'
        'name': 'constant.numeric.binary.literal.tjs'
    }
    {
        'match': '\\b([0-9.]+([eE]-?[0-9]*)?)\\b'
        'name': 'constant.numeric.decimal.literal.tjs'
    }
    {
        'match': '\\b(true|false)\\b'
        'name': 'constant.language.boolean.tjs'
    }

    # Keywords
    {
        'match': '\\b(null|void|NaN|Infinity)\\b'
        'name': 'constant.language.$1.tjs'
    }
    {
        'match': '\\b(this|super|global)\\b'
        'name': 'variable.language.tjs'
    }
    {
        'match': '\\b(break|case|catch|continue|default|do|else|finally|for|goto|if|return|switch|throw|try|while|with)\\b'
        'name': 'keyword.control.tjs'
    }
    {
        'match': '\\b(new|delete|typeof|int|real|string|incontextof|instanceof|invalidate|isvalid)\\b'
        'name': 'keyword.operator.tjs'
    }
    {
        'match': '\\b(setter|getter)\\b'
        'name': 'keyword.other.$1.tjs'
    }
    {
        'match': '\\b(debugger|enum|export|import|in|octet|synchronized|public|protected|private|static)\\b'
        'name': 'keyword.other.unused.tjs'
    }

    # Class definition
    {
        'match': '(class)\\s+(\\w+)(\\s+(extends)\\s(\\w+))?'
        'captures': {
            '1': { 'name': 'storage.type.class.tjs' }
            '2': { 'name': 'entity.name.type.tjs' }
            '4': { 'name': 'storage.type.class.tjs' }
            '5': { 'name': 'entity.name.type.tjs' }
        }
    }

    # Function definition
    {
        'match': '(function)\\s+(\\w+)'
        'captures': {
            '1': { 'name': 'storage.type.function.tjs' }
            '2': { 'name': 'entity.name.function.tjs' }
        }
    }

    # Function expression
    {
        'match': '\\b(function)\\b'
        'name': 'storage.type.function.tjs'
    }

    # Property definition
    {
        'match': '(property)\\s+(\\w+)'
        'captures': {
            '1': { 'name': 'storage.type.property.tjs' }
            '2': { 'name': 'entity.name.function.property.tjs' }
        }
    }

    # Variable definition
    {
        'match': '(var|const)\\s+(\\w+)\\s*(:\\s*(\\w+))?'
        'captures': {
            '1': { 'name': 'storage.type.tjs' }
            '2': { 'name': 'variable.other.tjs' }
            '4': { 'name': 'entity.name.type.tjs' }
        }
    }
]
